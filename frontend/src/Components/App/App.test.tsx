import { act, fireEvent, render } from '@testing-library/preact';
import { SCALES } from '../../../../shared/scales';
import { App } from './App';

const ConfigureMockWebSocket = () => {
  const instances: MockWebSocket[] = [];

  class MockWebSocket {
    onopen?(): void;

    onmessage?(event: MessageEvent): void;

    test_messages: string[] = [];

    constructor(public test_url: string) {
      instances.push(this);
    }

    send(message: string) {
      this.test_messages.push(message);
    }
  }

  window.WebSocket = MockWebSocket as unknown as typeof window.WebSocket;
  return instances;
};

const loginUser = () => {
  window.history.pushState({}, 'Test Title', '?sessionId=xvdBFRA6FyLZFcKo');
  const socketInstances = ConfigureMockWebSocket();
  const rendered = render(<App />);
  const socket = socketInstances[0];

  act(() => socket.onopen!());
  fireEvent.input(rendered.container.querySelector('input#user')!, {
    target: { value: 'Happy User' },
  });
  fireEvent.click(rendered.container.querySelector('input[type=submit]')!);

  expect(socket.test_messages).toEqual([
    '{"message":"sendmessage","data":{"type":"login","payload":{"user":"Happy User","session":"xvdBFRA6FyLZFcKo"}}}',
  ]);
  socket.test_messages = [];
  return { socket, ...rendered };
};

describe('The App component', () => {
  beforeAll(() => {
    Object.defineProperty(window, 'matchMedia', {
      writable: true,
      value: jest.fn().mockImplementation((query) => ({
        matches: false,
        media: query,
        onchange: null,
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn(),
      })),
    });
  });

  it('displays the login screen with a login indicator initially', () => {
    const { container } = render(<App />);
    expect(document.activeElement).toBe(container.querySelector('input#user'));
    expect(container.querySelector('a#session')).toHaveTextContent(/^[a-zA-Z0-9]{16}$/i);
    expect(container.querySelector('input[type=submit]')).toHaveValue('Connectingâ€¦');
    expect(container.querySelector('input[type=submit]')).toBeDisabled();
  });

  it('creates a socket connection and displays the login window with an autogenerated session link', () => {
    window.history.pushState({}, 'Test Title', '/');
    const socketInstances = ConfigureMockWebSocket();
    const { container } = render(<App />);
    expect(socketInstances).toHaveLength(1);
    const socket = socketInstances[0];
    expect(socket.test_url).toBe('wss://api.url');
    expect(typeof socket.onopen).toBe('function');
    expect(typeof socket.onmessage).toBe('function');

    act(() => socket.onopen!());

    expect(container.querySelector('input[type=submit]')).toHaveValue('Login');
    expect(container.querySelector('input[type=submit]')).toBeDisabled();

    fireEvent.input(container.querySelector('input#user')!, {
      target: { value: 'Happy User' },
    });
    expect(container.querySelector('input[type=submit]')).not.toBeDisabled();
  });

  it('logs the user in and displays the voting page, then displays the login page if the user is kicked out', () => {
    // given
    const { socket, container } = loginUser();

    expect(container).toHaveTextContent('Session: xvdBFRA6FyLZFcKoName: Happy User');
    expect(container.querySelectorAll('button.largeCard')).toHaveLength(14);

    // when
    act(() =>
      socket.onmessage!({ data: JSON.stringify({ type: 'not-logged-in' }) } as MessageEvent)
    );

    // then
    expect(container).not.toHaveTextContent('Connecting...');
    expect(container.querySelector('input#user')).toHaveValue('Happy User');
    expect(container.querySelector('a#session')).toBeVisible();
    expect(container.querySelector('a#session')).toHaveTextContent(/^[a-zA-Z0-9]{16}$/i);
    expect(container.querySelector('input[type=submit]')).toBeVisible();
  });

  it('updates, reveals and resets votes and kicks non-voting users optimistically', () => {
    // given
    const { socket, container, getByText } = loginUser();
    act(() =>
      socket.onmessage!({
        data: JSON.stringify({
          type: 'state',
          payload: {
            votes: {
              'Happy User': 'not-voted',
              'Voting User': '13',
              'Non-voting User': 'not-voted',
            },
            resultsVisible: false,
            scale: SCALES.COHEN_SCALE.values,
          },
        }),
      } as MessageEvent)
    );
    const selectedCard = container.querySelectorAll('button.largeCard')[5];
    expect(selectedCard).toHaveTextContent('2');
    expect(selectedCard).not.toHaveClass('selectedCard');
    expect(container.querySelector('tbody')).toHaveTextContent(
      'Happy UserNon-voting UserVoting User'
    );

    // when
    fireEvent.click(container.querySelectorAll('button.largeCard')[5]);

    // then
    expect(selectedCard).toHaveClass('selected');
    expect(container.querySelector('tbody')).toHaveTextContent(
      'Non-voting UserHappy UserVoting User'
    );
    expect(socket.test_messages).toEqual([
      '{"message":"sendmessage","data":{"type":"set-vote","payload":{"vote":"2"}}}',
    ]);
    socket.test_messages = [];

    // when
    fireEvent.click(getByText('Kick users without vote', { selector: 'button' }));

    // then
    expect(container.querySelector('tbody')).toHaveTextContent('Happy UserVoting User');
    expect(socket.test_messages).toEqual([
      '{"message":"sendmessage","data":{"type":"remove-users-not-voted"}}',
    ]);
    socket.test_messages = [];

    // when
    fireEvent.click(getByText('Reveal Votes', { selector: 'button' }));

    // then
    expect(container.querySelector('tbody')).toHaveTextContent('Happy User2Voting User13');
    expect(socket.test_messages).toEqual([
      '{"message":"sendmessage","data":{"type":"reveal-votes"}}',
    ]);
    socket.test_messages = [];

    // when
    fireEvent.click(getByText('Reset votes', { selector: 'button' }));

    // then
    expect(container.querySelector('tbody')).toHaveTextContent('Happy UserVoting User');
    expect(socket.test_messages).toEqual([
      '{"message":"sendmessage","data":{"type":"reset-votes"}}',
    ]);
  });
});
